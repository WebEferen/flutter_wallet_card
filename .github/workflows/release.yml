name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string
      prerelease:
        description: 'Create as prerelease'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_TOKEN || github.token }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.0'
        channel: 'stable'
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Run tests
      run: |
        dart format --output=none --set-exit-if-changed .
        dart analyze --fatal-infos
        flutter test

    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | tr -d ' ')
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: new_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current }}"
        
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          NEW_VERSION="${{ github.event.inputs.custom_version }}"
        else
          # Extract version parts
          IFS='.' read -ra VERSION_PARTS <<< "${CURRENT_VERSION%+*}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "${{ github.event.inputs.version_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        fi
        
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Update version in pubspec.yaml
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new }}"
        sed -i "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml
        echo "Updated pubspec.yaml with version $NEW_VERSION"

    - name: Update CHANGELOG.md
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new }}"
        DATE=$(date +"%Y-%m-%d")
        
        # Create temporary file with new changelog entry
        cat > temp_changelog.md << 'EOF'
        # Changelog
        
        All notable changes to this project will be documented in this file.
        
        ## [NEW_VERSION_PLACEHOLDER] - DATE_PLACEHOLDER
        
        ### Added
        - Release version NEW_VERSION_PLACEHOLDER
        
        ### Changed
        - Updated package version to NEW_VERSION_PLACEHOLDER
        
        ### Fixed
        - Various bug fixes and improvements
        
        EOF
        
        # Replace placeholders
        sed -i "s/NEW_VERSION_PLACEHOLDER/$NEW_VERSION/g" temp_changelog.md
        sed -i "s/DATE_PLACEHOLDER/$DATE/g" temp_changelog.md
        
        # If CHANGELOG.md exists, append the old content (skip the first few lines)
        if [ -f "CHANGELOG.md" ]; then
          tail -n +4 CHANGELOG.md >> temp_changelog.md
        fi
        
        # Replace the original file
        mv temp_changelog.md CHANGELOG.md
        
        echo "Updated CHANGELOG.md with version $NEW_VERSION"

    - name: Generate release notes
      id: release_notes
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new }}"
        
        # Extract changelog for this version
        CHANGELOG_CONTENT=$(awk "/^## \[$NEW_VERSION\]/ {flag=1; next} /^## \[/ {flag=0} flag" CHANGELOG.md)
        
        if [ -z "$CHANGELOG_CONTENT" ]; then
          cat > release_notes.md << EOF
        Release version $NEW_VERSION
        
        ### What's Changed
        - Updated to version $NEW_VERSION
        - Various improvements and bug fixes
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.current_version.outputs.current }}...v$NEW_VERSION
        EOF
        else
          echo "$CHANGELOG_CONTENT" > release_notes.md
        fi
        
        echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT

    - name: Commit version changes
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || github.token }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pubspec.yaml CHANGELOG.md
        git commit -m "chore: bump version to ${{ steps.new_version.outputs.new }}"
        git push

    - name: Create and push tag
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || github.token }}
      run: |
        git tag ${{ steps.new_version.outputs.tag }}
        git push origin ${{ steps.new_version.outputs.tag }}

    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .

    - name: Analyze project source
      run: dart analyze --fatal-infos

    - name: Run tests
      run: flutter test

    - name: Dry run publish
      run: dart pub publish --dry-run

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.new_version.outputs.tag }}
        release_name: Release ${{ steps.new_version.outputs.new }}
        body_path: ${{ steps.release_notes.outputs.notes_file }}
        draft: ${{ github.event.inputs.draft }}
        prerelease: ${{ github.event.inputs.prerelease }}





  notify-release:
    runs-on: ubuntu-latest
    name: Notify Release
    needs: [create-release]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.create-release.result == 'success'
      run: |
        echo "🎉 Release ${{ needs.create-release.outputs.new_version }} created successfully!"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.tag }}"

    - name: Notify failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "❌ Release creation failed!"
        echo "Please check the workflow logs for details."
        exit 1

  cleanup-on-failure:
    runs-on: ubuntu-latest
    name: Cleanup on Failure
    needs: [create-release]
    if: failure()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN || github.token }}

    - name: Delete tag on failure
      if: needs.create-release.outputs.tag
      run: |
        git tag -d ${{ needs.create-release.outputs.tag }} || true
        git push --delete origin ${{ needs.create-release.outputs.tag }} || true
        echo "Cleaned up tag ${{ needs.create-release.outputs.tag }}"

    - name: Delete release on failure
      if: needs.create-release.outputs.tag
      uses: actions/github-script@v6
      with:
        script: |
          try {
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const release = releases.data.find(r => r.tag_name === '${{ needs.create-release.outputs.tag }}');
            
            if (release) {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id
              });
              console.log('Deleted release ${{ needs.create-release.outputs.tag }}');
            }
          } catch (error) {
            console.log('Release cleanup failed:', error.message);
          }